//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

class Matrix {
  public:
    template <class T>
    static void input(vector<vector<T>> &A, int n, int m) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                scanf("%d ", &A[i][j]);
            }
        }
    }

    template <class T>
    static void print(vector<vector<T>> &A) {
        for (int i = 0; i < A.size(); i++) {
            for (int j = 0; j < A[i].size(); j++) {
                cout << A[i][j] << " ";
            }
            cout << endl;
        }
    }
};


// } Driver Code Ends

class Solution {
  public:
    int MinimumEffort(int n, int m, vector<vector<int>> &grid) {
        
        vector<int>rowChange = {-1,0,1,0};
        vector<int>colChange = {0,1,0,-1};

        vector<vector<int>> dist(n, vector<int>(m, 1e9));
        priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> q;
        
        //diff, row, col
        q.push({0,{0,0}});
        dist[0][0] = 0;
        
        while(!q.empty()){
            
            int i=q.top().second.first;
            int j=q.top().second.second;
            int curr_diff = q.top().first;
            q.pop();
            
            for(int in=0; in<4; in++){
                
                int nr = i+rowChange[in];
                int nc = j+colChange[in];
                
                if(nr>=0 && nr<n && nc>=0 && nc<m){
                    
                    int new_diff = abs(grid[i][j] - grid[nr][nc]);
                    
                    if(max(curr_diff, new_diff) < dist[nr][nc]){
                        dist[nr][nc] = max(curr_diff, new_diff);
                        q.push({dist[nr][nc],{nr,nc}});
                    }
                }
            }
        }
        
        return dist[n-1][m-1];
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    scanf("%d ", &t);
    while (t--) {

        int rows;
        scanf("%d", &rows);

        int columns;
        scanf("%d", &columns);

        vector<vector<int>> heights(rows, vector<int>(columns));
        Matrix::input(heights, rows, columns);

        Solution obj;
        int res = obj.MinimumEffort(rows, columns, heights);

        cout << res << endl;
    }
}

// } Driver Code Ends
