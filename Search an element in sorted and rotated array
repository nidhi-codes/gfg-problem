//{ Driver Code Starts
//Initial template for C++

#include<bits/stdc++.h>
using namespace std;

int Search(vector<int> ,int );

//User code will be pasted here

int main(){

    int t;
    cin >> t;

    while(t--){
        int n;
        cin >> n;
        
        vector<int> vec(n);
        
        for(int i =0;i<n;i++) 
            cin >> vec[i];
        
        int target;
        cin >> target;
        
        cout << Search(vec,target) << "\n";
         
    }
}
// } Driver Code Ends


//User function template for C++

// vec : given vector of elements
// K : given value whose index we need to find 

int pivotIndex(vector<int>& nums){

    int len = nums.size();

    int start = 0;
    int end = len-1;
    int mid;

    while(start<end){
        mid = start + (end-start)/2;

        if(nums[mid] > nums[end]){
            start = mid+1;
        }
        else{
            end = mid;
        }
    }
    return start;
}


int binarySearch(vector<int>& nums, int start, int end, int target){

    int mid;

    while(start<=end){
        mid = start + (end-start)/2;

        if(nums[mid] == target){
            return mid;
        }
        else if(nums[mid] > target){
            end = mid-1;
        }
        else{
            start = mid+1;
        }
    }

    return -1;
}


int Search(vector<int> vec, int K) {
    //code here
    
    int len = vec.size();
        
    int pivot = pivotIndex(vec);

    if(K >= vec[pivot] && K <= vec[len-1]){
        return binarySearch(vec, pivot, len-1, K);
    }

    return binarySearch(vec, 0, pivot-1, K);
}




