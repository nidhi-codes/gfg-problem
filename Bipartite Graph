//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
public:
    bool bfs(vector<int>adj[], vector<int>& color, int start){
        queue<pair<int,int>>q;
	    q.push({start,0});
	    color[0] = 0;
	    while(!q.empty()){
	        
	        int node = q.front().first;
	        int c = q.front().second;
	        q.pop();
	        
	        for(auto i : adj[node]){
	            if(color[i] == -1){
	                if(c == 0){
	                    q.push({i, 1});
	                    color[i] = 1;
	                }
	                else{
	                    q.push({i, 0});
	                    color[i] = 0;
	                }
	            }
	            
	            else if(color[i] == c){
	                return false;
	            }
	        }
	    }
	    
	    return true;
    }
	bool isBipartite(int V, vector<int>adj[]){
	    vector<int> color(V, -1);
	    for(int i=0; i<V; i++){
	        if(color[i] == -1){
	            if(bfs(adj, color, i) == false){
	                return false;
	            }
	        }
	    }
	    return true;
	}

};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int V, E;
		cin >> V >> E;
		vector<int>adj[V];
		for(int i = 0; i < E; i++){
			int u, v;
			cin >> u >> v;
			adj[u].push_back(v);
			adj[v].push_back(u);
		}
		Solution obj;
		bool ans = obj.isBipartite(V, adj);    
		if(ans)cout << "1\n";
		else cout << "0\n";  
	}
	return 0;
}
// } Driver Code Ends
