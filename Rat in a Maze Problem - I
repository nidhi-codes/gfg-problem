//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function template for C++

class Solution{
    public:
    
    bool pathExist(vector<vector<int>> m, vector<vector<int>> visited, int x1, int y1, int n){
        if(x1>=0 && y1>=0 && x1<n && y1<n){
            if(m[x1][y1] == 1 && visited[x1][y1] == 0){
                return true;
            }
        }
        else{
            return false;
        }
    }
    
    void recursion(vector<vector<int>> m, vector<string>& ans, vector<vector<int>> visited, string temp, int x, int y, int n){
        
        if(x>=n-1 && y>=n-1){
            ans.push_back(temp);
            return;
        }
        
        visited[x][y] = 1;
        
        //down
        int x1 = x+1;
        int y1 = y;
        
        if(pathExist(m, visited, x1, y1, n)){
    
            temp += 'D';
            recursion(m, ans, visited, temp, x1, y1, n);
            temp.pop_back();
            
        }
        
        //right
        x1 = x;
        y1 = y+1;
        
        if(pathExist(m, visited, x1, y1, n)){
    
            temp += 'R';
            recursion(m, ans, visited, temp, x1, y1, n);
            temp.pop_back();
            
        }
        
        //left
        x1 = x;
        y1 = y-1;
        
        if(pathExist(m, visited, x1, y1, n)){
    
            temp += 'L';
            recursion(m, ans, visited, temp, x1, y1, n);
            temp.pop_back();
            
        }
        
        
        //up
        x1 = x-1;
        y1 = y;
        
        if(pathExist(m, visited, x1, y1, n)){
    
            temp += 'U';
            recursion(m, ans, visited, temp, x1, y1, n);
            temp.pop_back();
            
        }
        
        visited[x][y] = 0;
        
    }
    
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        
        vector<string> ans;
        
        if(m[0][0] == 0){
            return ans;
        }
        
        vector<vector<int>> visited(n, vector<int>(n, 0));
        
        string temp = "";
        
        int index_x = 0;
        int index_y = 0;
        
        recursion(m, ans, visited, temp, index_x, index_y, n);
        
        sort(ans.begin(), ans.end());
        
        return ans;
        
        
    }
};

    


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> m(n, vector<int> (n,0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }
        Solution obj;
        vector<string> result = obj.findPath(m, n);
        sort(result.begin(), result.end());
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++) cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends
