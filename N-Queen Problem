//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++

class Solution{
public:

    void addAns(vector<vector<int>>& board, vector<vector<int>>& ans, int n){
        
        vector<int>temp;
        
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(board[i][j] == 1){
                    temp.push_back(j+1);
                    break;
                }
            }
        }
        
        ans.push_back(temp);
        return;
    }
    
    bool pathExist(int row, int col, vector<vector<int>>& board, int n){
        
        //upper diagonal
        for(int i=row-1, j=col-1; i>=0 && j>=0; i--, j--){
            if(board[i][j] == 1){
                return false;
            }
        }
        
        //row
        for(int i=col-1; i>=0; i--){
            if(board[row][i] == 1){
                return false;
            }
        }
        
        //lower diagonal
        for(int i=row+1, j=col-1; i<n && j>=0; i++, j--){
            if(board[i][j] == 1){
                return false;
            }
        }
        
        return true;
    }

    void solve(vector<vector<int>>& board, vector<vector<int>>& ans, int n, int col){
        if(col == n){
            addAns(board, ans, n);
            return;
        }
        
        for(int i=0; i<n; i++){
            if(pathExist(i, col, board, n)){
                board[i][col] = 1;
                solve(board, ans, n, col+1);
                board[i][col] = 0;
            }
        }
        
        return;
    }
    
    vector<vector<int>> nQueen(int n) {
        // code here
        
        vector<vector<int>> board(n, vector<int>(n,0));
        vector<vector<int>> ans;
        
        
        int col = 0;
        solve(board, ans, n, col);  //column wise solution
        
        sort(ans.begin(), ans.end());
        return ans;
    }
};

//{ Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        
        Solution ob;
        vector<vector<int>> ans = ob.nQueen(n);
        if(ans.size() == 0)
            cout<<-1<<"\n";
        else {
            for(int i = 0;i < ans.size();i++){
                cout<<"[";
                for(int u: ans[i])
                    cout<<u<<" ";
                cout<<"] ";
            }
            cout<<endl;
        }
    }
    return 0;
}
// } Driver Code Ends
