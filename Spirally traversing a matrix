//{ Driver Code Starts
#include <bits/stdc++.h> 
using namespace std; 

// } Driver Code Ends
class Solution
{   
    public: 
    //Function to return a list of integers denoting spiral traversal of matrix.
    vector<int> spirallyTraverse(vector<vector<int> > matrix, int r, int c) 
    {
        // code here 
        
        vector<int> ans;

        int noOfElement = r*c;
        int count = 0;

        int rowStartingIndex = 0;
        int rowEndingIndex = r-1;
        int colStartingIndex = 0;
        int colEndingIndex = c-1;


        while(count<noOfElement){
            
            if(count<noOfElement){
                for(int i = colStartingIndex; i<=colEndingIndex; i++){
                    ans.push_back(matrix[rowStartingIndex][i]);
                    count++;
                }
                rowStartingIndex++;
            }
            
            if(count<noOfElement){
                for(int i = rowStartingIndex; i<=rowEndingIndex; i++){
                    ans.push_back(matrix[i][colEndingIndex]);
                    count++;
                }
                colEndingIndex--;  
            }
                      

            if(count<noOfElement){
                for(int i = colEndingIndex; i>=colStartingIndex; i--){
                    ans.push_back(matrix[rowEndingIndex][i]);
                    count++;
                }
                rowEndingIndex--;
            }
            
            if(count<noOfElement){
                for(int i = rowEndingIndex; i>=rowStartingIndex; i--){
                    ans.push_back(matrix[i][colStartingIndex]);
                    count++;
                }
                colStartingIndex++;
            }
        }
        return ans;
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin>>t;
    
    while(t--) 
    {
        int r,c;
        cin>>r>>c;
        vector<vector<int> > matrix(r); 

        for(int i=0; i<r; i++)
        {
            matrix[i].assign(c, 0);
            for( int j=0; j<c; j++)
            {
                cin>>matrix[i][j];
            }
        }

        Solution ob;
        vector<int> result = ob.spirallyTraverse(matrix, r, c);
        for (int i = 0; i < result.size(); ++i)
                cout<<result[i]<<" ";
        cout<<endl;
    }
    return 0;
}
// } Driver Code Ends
