//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution{
    public:
    
    int smallestElementIndex(int* arr, int start, int end){

        int mid;

        while(start<end){
            mid = start + (end-start)/2;

            if(arr[mid] > arr[end]){
                start = mid+1;
            }
            else{
                end = mid;
            }
        }
        return start;
    }

    int binarySearch(int* arr, int start, int end, int key){

        int mid;

        while(start<=end){
            mid = start + (end-start)/2;

            if(arr[mid] == key){
                return mid;
            }
            else if(arr[mid] < key){
                start = mid+1;
            }
            else{
                end = mid-1;
            }
        }
        return -1;
    }


    int search(int A[], int l, int h, int key){
        // l: The starting index
        // h: The ending index, you have to search the key in this range
        
        //complete the function here
        int smallest = smallestElementIndex(A, l, h);
   
        if(key >= A[smallest] && key <= A[h]){
            return binarySearch(A, smallest, h, key);
        }

        return binarySearch(A, 0, smallest-1, key);
        }
};

//{ Driver Code Starts. 
int main() {
    int t;
    cin >> t;
    while(t--){
        int n;
        cin >> n;
        int A[n];
        for(int i = 0; i < n; i++)
            cin >> A[i];
        int key;
        cin >> key;
        Solution ob;
        cout << ob.search(A, 0, n - 1, key) << endl;
    }
return 0;
}
// } Driver Code Ends
