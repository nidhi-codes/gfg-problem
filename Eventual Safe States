//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution {
  public:
    
    bool dfs(vector<int> adj[], vector<int>& vis, vector<int>& path, vector<int>& check, int node){
        
        vis[node] = 1;
        path[node] = 1;
        
        for(auto i : adj[node]){
            
            if(!vis[i]){
                if(dfs(adj, vis, path,check, i) == true){
                    return true;
                }
            }
            
            if(path[i]){
                return true;
            }
        }
        
        check[node] = 1;
        path[node] = 0;
        return false;
    }
    
    vector<int> eventualSafeNodes(int V, vector<int> adj[]) {
        
        vector<int>safe;
        vector<int>check(V, 0);
        vector<int>vis(V, 0);
        vector<int>path(V, 0);
        
        for(int i=0; i<V; i++){
            if(!vis[i]){
                dfs(adj, vis, path,check, i);
            }
        }
        
        for(int i=0; i<V; i++){
            if(check[i]){
                safe.push_back(i);
            }
        }
        
        return safe;
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {

        int V, E;
        cin >> V >> E;
        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
        }

        Solution obj;
        vector<int> safeNodes = obj.eventualSafeNodes(V, adj);
        for (auto i : safeNodes) {
            cout << i << " ";
        }
        cout << endl;
    }
}

// } Driver Code Ends
