//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    struct Node *next, *prev;

    Node(int x) {
        data = x;
        next = NULL;
        prev = NULL;
    }
};


// } Driver Code Ends

/* Structure of the node of the list is as
struct Node
{
    int data;
    struct Node *next, *prev;
    Node (int x){
        data = x;
        next = prev = NULL;
    }
};
*/

class Solution {
  public:
    // Function to sort the given doubly linked list using Merge Sort.
    
    struct Node* merge(struct Node* first, struct Node* second){
        
        if(first == NULL){
            return second;
        }
        if(second == NULL){
            return first;
        }
        
        
        if(first->data <= second->data){
            first->next =  merge(first->next, second);
            first->next->prev = first;
            first->prev = NULL;
            return first;
        }
        else{
            second->next =  merge(first, second->next);
            second->next->prev = second;
            second->prev = NULL;
            return second;
        }
        
    }
    
    Node* split(struct Node* head){
        
        struct Node* slow = head;
        struct Node* fast = head;
        
        while(fast->next && fast->next->next){
            slow = slow->next;
            fast = fast->next->next;
        }
        
        struct Node* temp = slow->next;
        slow->next = NULL;
        return temp;
    }
    
    struct Node* mergeSort(struct Node* head){
        
        if(head==NULL || head->next==NULL){
            return head;
        }
        
        struct Node* first = head;
        struct Node* second = split(head);
        
        first = mergeSort(first);
        second = mergeSort(second);
        
        return merge(first, second);
    }
    struct Node *sortDoubly(struct Node *head) {
        // Your code here9
        
        head = mergeSort(head);
        return head;
    }
};


//{ Driver Code Starts.

void insert(struct Node **head, int data) {
    struct Node *temp = new Node(data);
    if (!(*head))
        (*head) = temp;
    else {
        temp->next = *head;
        (*head)->prev = temp;
        (*head) = temp;
    }
}

void print(struct Node *head) {
    struct Node *temp = head;
    while (head) {
        cout << head->data << ' ';
        temp = head;
        head = head->next;
    }
    cout << endl;
    while (temp) {
        cout << temp->data << ' ';
        temp = temp->prev;
    }
    cout << endl;
}

// Utility function to swap two integers
void swap(int *A, int *B) {
    int temp = *A;
    *A = *B;
    *B = temp;
}

// Driver program
int main(void) {
    long test;
    cin >> test;
    while (test--) {
        int n, tmp;
        struct Node *head = NULL;
        cin >> n;
        while (n--) {
            cin >> tmp;
            insert(&head, tmp);
        }
        Solution ob;
        head = ob.sortDoubly(head);
        print(head);
    }
    return 0;
}

// } Driver Code Ends
