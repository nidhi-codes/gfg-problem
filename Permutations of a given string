//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution
{
	public:
	
	    void recursion(string s, vector<string>& ans, int index){
	        
	        int len = s.length();
	        
	        if(index == len-1){
	            ans.push_back(s);
	            return;
	        }
	        
	        unordered_set<char> uniqueValue;
	        
	        for(int i=index; i<len; i++){
	            if(uniqueValue.find(s[i]) == uniqueValue.end()){
	                uniqueValue.insert(s[i]);
	                swap(s[i], s[index]);
	                recursion(s, ans, index+1);
	                swap(s[i], s[index]);
	            }
	            
	        }
	    }
	    
		vector<string>find_permutation(string s)
		{
		    // Code here there
		    vector<string> ans;
		    
		    int index = 0;
		    
		    recursion(s, ans, index);
		    
		    sort(ans.begin(), ans.end());
		    
		    return ans;
		}
};



//{ Driver Code Starts.
int main(){
    int t;
    cin >> t;
    while(t--)
    {
	    string S;
	    cin >> S;
	    Solution ob;
	    vector<string> ans = ob.find_permutation(S);
	    sort(ans.begin(),ans.end());
	    for(auto i: ans)
	    {
	    	cout<<i<<" ";
	    }
	    cout<<"\n";
    }
	return 0;
}

// } Driver Code Ends
