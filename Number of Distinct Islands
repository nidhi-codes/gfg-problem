//{ Driver Code Starts
// Initial Template for C++
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution {
  public:
    int rowChange[4] = {-1,0,1,0};
    int colChange[4] = {0,1,0,-1};
    void dfs(vector<vector<int>>& grid, vector<vector<int>>& vis, vector<int>& temp, int i, int j, int row, int col, int sr, int sc){
        
        vis[i][j] = 1;
        temp.push_back(i-sr);
        temp.push_back(j-sc);
        for(int in=0; in<4; in++){
            int r = i+rowChange[in];
            int c = j+colChange[in];

            if(r>=0 && r<row && c>=0 && c<col && grid[r][c] == 1 && !vis[r][c]){
                dfs(grid, vis, temp, r, c, row, col, sr, sc);
            }
        }
    }
    int countDistinctIslands(vector<vector<int>>& grid) {
        // code here
        
        int row = grid.size();
        int col = grid[0].size();
        
        set<vector<vector<int>>>s;
        vector<vector<int>>vis(row, vector<int>(col, 0));
        for(int i=0; i<row; i++){
            for(int j=0; j<col; j++){
                if(grid[i][j] == 1 && !vis[i][j]){
                    vector<int>temp;
                    dfs(grid,vis, temp, i, j, row, col, i, j);
                    s.insert({temp});
                }
                
            }
        }
        
        return s.size();
    }
};


//{ Driver Code Starts.

int main() {

    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> grid(n, vector<int>(m));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        cout << obj.countDistinctIslands(grid) << endl;
    }
}
// } Driver Code Ends
