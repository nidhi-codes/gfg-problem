//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;
#define N 1000


// } Driver Code Ends
// you are required to complete this function 
// function should print the required range

class node{
    public: 
        int data;
        int row;
        int col;

        node(int d, int r, int c){
            data = d;
            row = r;
            col = c;
        }
};

class compare{
    public:
        bool operator()(node a, node b){
            return a.data > b.data;
        }
};

class Solution{
    public:
    pair<int,int> findSmallestRange(int a[][N], int n, int k)
    {
        priority_queue<node, vector<node>, compare> q;

        int mini = INT_MAX;
        int maxi = INT_MIN;
    
        for(int i=0; i<k; i++){
    
            int temp = a[i][0];
    
            q.push(node(temp, i, 0));
            mini = min(mini, temp);
            maxi = max(maxi, temp);
        }
    
        int ansS = mini;
        int ansE = maxi;
    
        while(!q.empty()){
    
            node temp = q.top();
            q.pop();
    
            int mini = temp.data;
            int row = temp.row;
            int col = temp.col;
    
    
            if(maxi-mini < ansE-ansS){
                ansE = maxi;
                ansS = mini;
            }
    
            if(col+1 < n){
                maxi = max(maxi, a[row][col+1]);
                q.push(node(a[row][col+1], row, col+1));
            }
    
            else {
                break;
            }
        }
    
        return {ansS, ansE};
    }
};

//{ Driver Code Starts.
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n, k;
        cin>>n>>k;
        int arr[N][N];
        pair<int,int> rangee;
        for(int i=0; i<k; i++)
            for(int j=0; j<n; j++)
                cin>>arr[i][j];
        Solution obj;
	    rangee = obj.findSmallestRange(arr, n, k);
	    cout<<rangee.first<<" "<<rangee.second<<"\n";
    }   
	return 0;
}


// } Driver Code Ends
