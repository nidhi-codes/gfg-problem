//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution
{
    public:
    
    vector<long long> nextSmallerElement(long long arr[], int n)
    {
        vector<long long> ans(n);
        
        stack<long long> st;
        st.push(-1);

        for(int i=n-1; i>=0; i--){

            while(st.top() != -1 && arr[st.top()] >= arr[i]){
                st.pop();
            }

            ans[i] = st.top();
            st.push(i);

        }

        return ans;
    }

    vector<long long> prevSmallerElement(long long arr[], int n)
    {
        vector<long long> ans(n);

        stack<long long> st;
        st.push(-1);

        for(int i=0; i<n; i++){
            
            while(st.top() != -1 && arr[st.top()] >= arr[i]){
                st.pop();
            }

            ans[i] = st.top();
            st.push(i);

        }

        return ans;
    }

    
    //Function to find largest rectangular area possible in a given histogram.
    long long getMaxArea(long long arr[], int n)
    {
        // Your code here
        
        vector<long long> next = nextSmallerElement(arr, n);

        vector<long long> prev = prevSmallerElement(arr, n);
         
        long long area = INT_MIN;

        for(int i=0; i<n; i++){

            if(next[i] == -1){
                next[i] = n;
            }

            long long l = arr[i];
            long long b = next[i] - prev[i] - 1;

            area = max(area, l*b);
        }

        return area;
    }
};


//{ Driver Code Starts.

int main()
 {
    long long t;

    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        
        long long arr[n];
        for(int i=0;i<n;i++)
            cin>>arr[i];
        Solution ob;
        cout<<ob.getMaxArea(arr, n)<<endl;
    
    }
	return 0;
}

// } Driver Code Ends
