//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++
class Solution {
  public:
    void dfs(vector<pair<int, int>> adj[], stack<int>& st, vector<int>& vis, int node){
        
        vis[node] = 1;
        
        for(auto i : adj[node]){
            if(!vis[i.first]){
                dfs(adj, st, vis, i.first);
            }
        }
        
        st.push(node);
    }
    
    vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        
        vector<pair<int, int>> adj[N];

        
        for(auto i : edges){
            adj[i[0]].push_back({i[1], i[2]});
        }
        
        vector<int> dist(N, 1e9);
        stack<int> st;
        vector<int>vis(N, 0);
        
        for(int i=0; i<N; i++){
            if(!vis[i]){
                dfs(adj, st, vis, i);
            }
        }
        
        dist[0] = 0;
        while(!st.empty()){
            int node = st.top();
            st.pop();
            
            for(auto i : adj[node]){
                dist[i.first] = min(dist[node]+i.second, dist[i.first]);
            }
        }
        
        for(int i=0; i<N; i++){
            if(dist[i] == 1e9){
                dist[i] = -1;
            }
        }
        return dist;
        
    }
};


//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> edges;
        for(int i=0; i<m; ++i){
            vector<int> temp;
            for(int j=0; j<3; ++j){
                int x; cin>>x;
                temp.push_back(x);
            }
            edges.push_back(temp);
        }
        Solution obj;
        vector<int> res = obj.shortestPath(n, m, edges);
        for (auto x : res) {
            cout << x << " ";
        }
        cout << "\n";
    }
}

// } Driver Code Ends
