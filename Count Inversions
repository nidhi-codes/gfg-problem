//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution{
  public:
  
    long long mergeAndInversion(long long arr[], int s, int e){

        long long mid = s+(e-s)/2;

        long long len1 = mid-s+1;
        long long len2 = e-mid;

        long long* arr1 = new long long[len1];
        long long* arr2 = new long long[len2];

        for(long long i=0; i<len1; i++){
            arr1[i] = arr[s+i];
        }

        for(long long i=0; i<len2; i++){
            arr2[i] = arr[mid+1+i];
        }

        long long i = 0;
        long long j = 0;
        long index = s;
        long long count = 0;

        while(i<len1 && j<len2){

            if(arr1[i] > arr2[j]){
                arr[index] = arr2[j];
                index++;
                j++;
                count += len1-i;
            }
            else{   
                arr[index] = arr1[i];
                index++;
                i++;
            }
        }

        while(i<len1){
            arr[index] = arr1[i];
            index++;
            i++;
        }

        while(i<len2){
            arr[index] = arr2[j];
            index++;
            j++;
        }

        delete []arr1;
        delete []arr2;
    
        return count;

    }

    long long mergeSort(long long arr[], int s, int e){
    
        long long count = 0;

        if(s<e){
            long long mid = s+(e-s)/2;

            count += mergeSort(arr, s, mid);
            count += mergeSort(arr, mid+1, e);
            count += mergeAndInversion(arr, s, e);
        }
    
        return count;
    }
    
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    long long int inversionCount(long long arr[], long long N)
    {
        // Your Code Here
        return mergeSort(arr, 0, N-1);
    }

};

//{ Driver Code Starts.

int main() {
    
    long long T;
    cin >> T;
    
    while(T--){
        long long N;
        cin >> N;
        
        long long A[N];
        for(long long i = 0;i<N;i++){
            cin >> A[i];
        }
        Solution obj;
        cout << obj.inversionCount(A,N) << endl;
    }
    
    return 0;
}

// } Driver Code Ends
