//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:
    // Function to find distance of nearest 1 in the grid for each cell.
    vector<vector<int>> nearest(vector<vector<int>>& grid) {
        // Code here
        
        int row = grid.size();
        int col = grid[0].size();
        
        vector<vector<int>> vis(row, vector<int>(col, 0));
        int rowChange[] = {-1,0,1,0};
        int colChange[] = {0,1,0,-1};
        queue<pair<int, int>> q;
        
        for(int i=0; i<row; i++){
            for(int j=0; j<col; j++){
                if(grid[i][j] == 1){
                    q.push({i,j});
                    vis[i][j] = -1;
                }
            }
        }
        
        int time = 1;
        while(!q.empty()){
            
            int size = q.size();
            
            for(int i=0; i<size; i++){
                int r =  q.front().first;
                int c = q.front().second;
                q.pop();
                
                for(int j=0; j<4; j++){
                    int newRow = r+rowChange[j];
                    int newCol = c+colChange[j];
                    
                    if(newRow >= 0 && newRow < row && newCol >= 0 && newCol < col && vis[newRow][newCol] == 0){
                        vis[newRow][newCol] = time;
                        q.push({newRow, newCol});
                    }
                }
            }
            
            time++;
        }
        
        for(int i=0; i<row; i++){
            for(int j=0; j<col; j++){
                if(vis[i][j] == -1){
                    vis[i][j] = 0;
                }
            }
        }
        
        return vis;
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> grid(n, vector<int>(m, -1));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        vector<vector<int>> ans = obj.nearest(grid);
        for (auto i : ans) {
            for (auto j : i) {
                cout << j << " ";
            }
            cout << "\n";
        }
    }
    return 0;
}
// } Driver Code Ends
